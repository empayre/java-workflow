name: Run Semgrep
on:
  workflow_call:
    secrets:
      mm-sa-wh-url:
        required: true

jobs:
  semgrep:
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: | 
          semgrep \
            --gitlab-sast --output semgrep.json\
            --metrics=off \
            --config="p/default"

      - name: Save raw report
        uses: actions/upload-artifact@v4
        with:
          name: raw_report
          path: semgrep.json

      - name: Create edited report
        run: |
          cat semgrep.json | jq '.vulnerabilities[] | [{ category, description, location, severity }]' > semgrep_edited.json

        shell: bash
      
      - name: Save edited report
        uses: actions/upload-artifact@v4
        with:
          name: edited_report
          path: semgrep_edited.json
      
      - name: Display in the console
        run: |
          cat semgrep_edited.json

      - name: Check
        id: check_s
        run: |
          if jq -e '.[] | select(.severity=="Medium" or .severity=="High" or .severity=="Critical")' semgrep_edited.json > /dev/null; then
            echo "found=true" >> $GITHUB_ENV
            jq -c '.[] | select(.severity=="Medium" or .severity=="High" or .severity=="Critical")' semgrep_edited.json > findings.json
          else
            echo "found=false" >> $GITHUB_ENV
          fi

      - name: Save finding report
        uses: actions/upload-artifact@v4
        with:
          name: findings_report
          path: findings.json
  
      - name: Notify Mattermost
        if: env.found == 'true'
        env:
          REPO_URL: ${{ github.repository_url }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          STATUS: ${{ job.status }}
        run: |
          findings=$(cat findings.json | jq -R -s .)
          repo_url="$REPO_URL"
          pr_url="$PR_URL"
          status="$STATUS"
          payload=$(jq -n --arg repo_url "$repo_url" --arg pr_url "$pr_url" --arg status "$status" --arg text "Найдены результаты анализа" --argjson attachments \
            '[{"filename": "findings.json", "content": $findings}]' \
            '{text: $text, attachments: $attachments, extra: {"Repository URL": $repo_url, "Pull Request URL": $pr_url, "Job Status": $status}}')
          curl -v -X POST -H 'Content-Type: application/json' -d "$payload" "${{ secrets.mm-sa-wh-url }}"

      - name: Find and Update Comment with Semgrep Results
        if: env.found == 'true'
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const semgrepResults = fs.readFileSync('findings.json', 'utf8');
            const pr_number = context.payload.pull_request.number;

            const comments = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
            });

            const existingComment = comments.data.find(comment => comment.body.includes('Semgrep analysis results:'));

            if (existingComment) {
              await github.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: `Semgrep analysis results:\n\`\`\`json\n${semgrepResults}\n\`\`\``,
              });
            } else {
              await github.issues.createComment({
                issue_number: pr_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `Semgrep analysis results:\n\`\`\`json\n${semgrepResults}\n\`\`\``,
              });
            } 